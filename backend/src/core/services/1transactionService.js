const TronWeb = require('tronweb');
const { ethers, BigNumber } = require('ethers');
const config = require('../../config');
const UserRepository = require('../../db/repositories/UserRepository');
const logger = require('../services/loggingService');
const delay = (ms) => new Promise((res) => setTimeout(res, ms));
const messageQueue = require('../../infrastructure/messageQueue');

const TronWeb = require('tronweb');
const { ethers } = require('ethers');
const config = require('../../config');
const UserRepository = require('../../db/repositories/UserRepository');
const logger = require('../services/loggingService');
const redisClient = require('../../infrastructure/redisClient');
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const tronWeb = new TronWeb({ fullHost: config.tron_api_url, privateKey: config.tron_private_key });
const provider = new ethers.JsonRpcProvider(config.mtt_rpc_url);
const wallet = new ethers.Wallet(config.mtt_private_key, provider);

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ USDT (TRC-20) —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 */
const sendUSDT = async (userId, recipient, amount, retries = 3) => {
    try {
        const user = await UserRepository.findById(userId);
        if (!user || BigNumber.from(user.balance.USDT).lt(BigNumber.from(amount))) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }

        const contract = await tronWeb.contract().at(config.USDT_CONTRACT_ADDRESS);
        let txHash;

        for (let i = 0; i < retries; i++) {
            try {
                txHash = await contract.transfer(recipient, TronWeb.toSun(amount)).send();
                logger.info(`‚úÖ USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Tx: ${txHash}`);
                await messageQueue.publish('transaction_confirmations', { txHash, userId, token: 'USDT', amount });
                return txHash;
            } catch (error) {
                logger.warn(`üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${error.message}`);
                if (i < retries - 1) await delay(3000);
            }
        }
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ USDT: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ MTT (EVM) —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 */
const sendMTT = async (userId, recipient, amount, retries = 3) => {
    try {
        const user = await UserRepository.findById(userId);
        if (!user || BigNumber.from(user.balance.MTT).lt(BigNumber.from(amount))) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }

        let tx;
        for (let i = 0; i < retries; i++) {
            try {
                tx = await wallet.sendTransaction({
                    to: recipient,
                    value: ethers.utils.parseEther(amount.toString())
                });
                await tx.wait();
                logger.info(`‚úÖ MTT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Tx: ${tx.hash}`);
                await messageQueue.publish('transaction_confirmations', { txHash: tx.hash, userId, token: 'MTT', amount });
                return tx.hash;
            } catch (error) {
                logger.warn(`üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ MTT (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${error.message}`);
                if (i < retries - 1) await delay(3000);
            }
        }
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ MTT –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ MTT: ${error.message}`);
        throw error;
    }
};

module.exports = { sendUSDT, sendMTT };

const TronWeb = require('tronweb');
const { ethers } = require('ethers');
const config = require('../../config');
const UserRepository = require('../../db/repositories/UserRepository');
const logger = require('../services/loggingService');
const redisClient = require('../../infrastructure/redisClient');
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

const tronWeb = new TronWeb({ fullHost: config.tron_api_url, privateKey: config.tron_private_key });
const provider = new ethers.JsonRpcProvider(config.mtt_rpc_url);
const wallet = new ethers.Wallet(config.mtt_private_key, provider);

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ USDT —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 */
const sendUSDT = async (userId, recipient, amount, retries = 3) => {
    try {
        const user = await UserRepository.findById(userId);
        if (!user || user.balance.USDT < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }
        const contract = await tronWeb.contract().at(config.usdt_token_address);
        const txHash = await contract.transfer(recipient, TronWeb.toSun(amount)).send();
        logger.info(`‚úÖ USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Tx: ${txHash}`);
        await redisClient.set(`pending_tx:${txHash}`, { userId, amount, token: 'USDT' }, 600);
        return txHash;
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
const confirmTransaction = async (txHash, network = 'tron') => {
    try {
        for (let i = 0; i < 5; i++) {
            const receipt = network === 'tron' ? await tronWeb.trx.getTransactionInfo(txHash) : await provider.getTransactionReceipt(txHash);
            if (receipt && receipt.blockNumber) {
                logger.info(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${txHash}`);
                await redisClient.set(`confirmed_tx:${txHash}`, true, 86400);
                return true;
            }
            await delay(5000);
        }
        throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txHash} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
        throw error;
    }
};

module.exports = { sendUSDT, confirmTransaction };
