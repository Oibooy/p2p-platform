const TronWeb = require('tronweb');
const { ethers, BigNumber } = require('ethers');
const logger = require('../services/loggingService');
const config = require('../../config');
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tron
const tronWeb = new TronWeb({
    fullHost: process.env.TRON_API_URL,
    privateKey: process.env.HOT_WALLET_PRIVATE_KEY
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EVM
const provider = new ethers.JsonRpcProvider(config.MTT_NETWORK_RPC);
const wallet = new ethers.Wallet(process.env.HOT_WALLET_PRIVATE_KEY, provider);

/**
 * üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const getHotWalletBalance = async () => {
    try {
        const walletAddress = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);
        const balance = await tronWeb.trx.getBalance(walletAddress);
        return BigNumber.from(balance).div(BigNumber.from(1e6)).toString();
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ USDT (TRC-20) —Å —Ä–µ—Ç—Ä–∞—è–º–∏
 */
const sendUSDT = async (recipient, amount, retries = 3) => {
    try {
        const contract = await tronWeb.contract().at(config.USDT_TOKEN_ADDRESS);
        const sender = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);

        logger.info(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} USDT –Ω–∞ ${recipient} —Å ${sender}`);

        let txHash;
        for (let i = 0; i < retries; i++) {
            try {
                txHash = await contract.transfer(recipient, TronWeb.toSun(amount)).send();
                logger.info(`‚úÖ USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: Tx: ${txHash}`);
                return txHash;
            } catch (error) {
                logger.warn(`üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${error.message}`);
                if (i < retries - 1) await delay(3000);
            }
        }
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ USDT: ${error.message}`);
        throw error;
    }
};

module.exports = { getHotWalletBalance, sendUSDT };
