// src/services/hotWalletService.js
const TronWeb = require('tronweb');
const logger = require('../services/loggingService');
const config = require('../../config');

const tronWeb = new TronWeb({
    fullHost: process.env.TRON_API_URL
    privateKey: process.env.TRON_PRIVATE_KEY
});

/**
 * üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const getHotWalletBalance = async () => {
    try {
        const walletAddress = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);
        const balance = await tronWeb.trx.getBalance(walletAddress);
        return balance / 1e6; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TRX
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ USDT (TRC-20) —Å –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const sendUSDT = async (recipient, amount) => {
    try {
        const contract = await tronWeb.contract().at(config.USDT_TOKEN_ADDRESS);
        const sender = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);

        logger.info(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} USDT –Ω–∞ –∞–¥—Ä–µ—Å ${recipient} —Å –∫–æ—à–µ–ª—å–∫–∞ ${sender}`);

        const transaction = await contract.transfer(recipient, amount * 1e6).send();
        return transaction;
    } catch (error) {
        logger.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ USDT: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –≥–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫
 */
const monitorIncomingTransactions = async () => {
    try {
        const walletAddress = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);

        setInterval(async () => {
            const transactions = await tronWeb.getEventResult(config.USDT_TOKEN_ADDRESS, 'Transfer', {
                filters: { to: walletAddress },
                onlyConfirmed: true
            });

            transactions.forEach(tx => {
                logger.info(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${tx.value / 1e6} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ ${walletAddress} –æ—Ç ${tx.from}`);
                // –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ EscrowService
            });
        }, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    } catch (error) {
        logger.logError(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
    }
};

module.exports = { getHotWalletBalance, sendUSDT, monitorIncomingTransactions };
