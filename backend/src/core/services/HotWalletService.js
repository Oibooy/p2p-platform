// src/services/hotWalletService.js
const TronWeb = require('tronweb');
const logger = require('../services/loggingService');
const { ethers } = require('ethers');
const config = require('../../config');
const UserRepository = require('../../db/repositories/UserRepository');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tron (USDT TRC-20)
const tronWeb = new TronWeb({
    fullHost: process.env.TRON_API_URL,
    privateKey: process.env.HOT_WALLET_PRIVATE_KEY
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MTT (EVM, Cosmos SDK)
const provider = new ethers.JsonRpcProvider(config.MTT_NETWORK_RPC);
const wallet = new ethers.Wallet(process.env.HOT_WALLET_PRIVATE_KEY, provider);

/**
 * üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const getHotWalletBalance = async () => {
    try {
        const walletAddress = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);
        const balance = await tronWeb.trx.getBalance(walletAddress);
        return balance / 1e6; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TRX
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ USDT (TRC-20) —Å –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const sendUSDT = async (recipient, amount) => {
    try {
        const contract = await tronWeb.contract().at(config.USDT_TOKEN_ADDRESS);
        const sender = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);

        logger.info(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} USDT –Ω–∞ –∞–¥—Ä–µ—Å ${recipient} —Å –∫–æ—à–µ–ª—å–∫–∞ ${sender}`);

        const transaction = await contract.transfer(recipient, amount * 1e6).send();
        return transaction;
    } catch (error) {
        logger.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ USDT: ${error.message}`);
        throw error;
    }
};

/**
 * üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –≥–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫
 */
const monitorIncomingTransactions = async () => {
    try {
        const walletAddress = tronWeb.address.fromPrivateKey(process.env.TRON_PRIVATE_KEY);

        setInterval(async () => {
            const transactions = await tronWeb.getEventResult(config.USDT_TOKEN_ADDRESS, 'Transfer', {
                filters: { to: walletAddress },
                onlyConfirmed: true
            });

            transactions.forEach(tx => {
                logger.info(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${tx.value / 1e6} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ ${walletAddress} –æ—Ç ${tx.from}`);
                // –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ EscrowService
            });
        }, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    } catch (error) {
        logger.logError(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
    }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const generateUserWallet = async (userId) => {
    try {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è MTT –∏ USDT
        const mttWallet = ethers.Wallet.createRandom();
        const usdtWallet = tronWeb.createAccount();

        await UserRepository.updateUserWallets(userId, {
            MTT: mttWallet.address,
            USDT: usdtWallet.address
        });

        return { MTT: mttWallet.address, USDT: usdtWallet.address };
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`);
        throw error;
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç USDT (TRC-20) —Å –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const sendUSDT = async (userId, recipient, amount) => {
    try {
        const user = await UserRepository.findById(userId);
        if (!user || user.balance.USDT < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }

        const contract = await tronWeb.contract().at(config.USDT_CONTRACT_ADDRESS);
        await contract.transfer(recipient, amount * 1e6).send();

        await UserRepository.updateUserBalance(userId, 'USDT', -amount);
        logger.info(`–í—ã–≤–æ–¥: ${amount} USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}`);
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ USDT: ${error.message}`);
        throw error;
    }
};


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç MTT —Å –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
const sendMTT = async (userId, recipient, amount) => {
    try {
        const user = await UserRepository.findById(userId);
        if (!user || user.balance.MTT < amount) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        }

        const tx = await wallet.sendTransaction({
            to: recipient,
            value: ethers.parseEther(amount.toString())
        });

        await UserRepository.updateUserBalance(userId, 'MTT', -amount);
        logger.info(`–í—ã–≤–æ–¥: ${amount} MTT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}`);
        return tx.hash;
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ MTT: ${error.message}`);
        throw error;
    }
};

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π MTT –∏ USDT TRC-20
 */
const monitorIncomingTransactions = async () => {
    try {
        setInterval(async () => {
            const users = await UserRepository.getAllUsers();
            for (const user of users) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ USDT (TRC-20)
                const usdtBalance = await tronWeb.trx.getBalance(user.wallets.USDT);
                if (usdtBalance > 0) {
                    await UserRepository.updateUserBalance(user._id, 'USDT', usdtBalance / 1e6);
                    logger.info(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${usdtBalance / 1e6} USDT –¥–ª—è ${user.wallets.USDT}`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ MTT
                const mttBalance = await provider.getBalance(user.wallets.MTT);
                if (mttBalance > 0) {
                    await UserRepository.updateUserBalance(user._id, 'MTT', ethers.formatEther(mttBalance));
                    logger.info(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${ethers.formatEther(mttBalance)} MTT –¥–ª—è ${user.wallets.MTT}`);
                }
            }
        }, 15000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    } catch (error) {
        logger.logError(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
monitorIncomingTransactions();

module.exports = { getHotWalletBalance, sendUSDT, monitorIncomingTransactions, generateUserWallet, sendMTT, monitorIncomingTransactions };