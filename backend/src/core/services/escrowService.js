// src/core/services/escrowService.js (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ + —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
const tronWeb = require('../../infrastructure/tronWeb');
const { OrderRepository } = require('../../db/repositories/OrderRepository');
const logger = require('../../infrastructure/logger');
const metrics = require('../../infrastructure/metrics'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const MAX_RETRIES = 3;
const RETRY_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

class EscrowService {
    constructor() {
        this.orderRepository = new OrderRepository();
    }

    async initiateTransaction(orderId, sender, receiver, amount) {
        try {
            const order = await this.orderRepository.findById(orderId);
            if (!order) throw new Error('Order not found');
            if (order.status !== 'PENDING') throw new Error('Order is not in a valid state');

            logger.info(`Initiating escrow transaction for order ${orderId}`);
            metrics.increment('escrow.transactions.initiated'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏

            const transaction = await this.retryAsync(() => tronWeb.sendTransaction(receiver, amount, sender), MAX_RETRIES);
            if (!transaction || !transaction.txID) {
                throw new Error('Transaction failed');
            }

            await this.orderRepository.updateStatus(orderId, 'IN_PROGRESS', transaction.txID);
            metrics.increment('escrow.transactions.success'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            return transaction;
        } catch (error) {
            logger.error(`EscrowService Error: ${error.message}`);
            metrics.increment('escrow.transactions.failed'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            throw error;
        }
    }

    async confirmTransaction(orderId, txID) {
        try {
            const order = await this.orderRepository.findById(orderId);
            if (!order) throw new Error('Order not found');
            if (order.status !== 'IN_PROGRESS') throw new Error('Order is not in progress');

            const receipt = await this.retryAsync(() => tronWeb.getTransactionReceipt(txID), MAX_RETRIES);
            if (!receipt || receipt.status !== 'SUCCESS') {
                throw new Error('Transaction not confirmed');
            }

            await this.orderRepository.updateStatus(orderId, 'COMPLETED');
            metrics.increment('escrow.transactions.confirmed'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            return { success: true };
        } catch (error) {
            logger.error(`Transaction Confirmation Error: ${error.message}`);
            metrics.increment('escrow.transactions.confirmation_failed'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            throw error;
        }
    }

    async retryAsync(fn, retries) {
        let attempt = 0;
        while (attempt < retries) {
            try {
                return await fn();
            } catch (error) {
                attempt++;
                logger.warn(`Retrying transaction... Attempt ${attempt}/${retries}`);
                metrics.increment('escrow.transactions.retries'); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                if (attempt >= retries) throw error;
                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            }
        }
    }
}

module.exports = new EscrowService();

// src/services/escrowService.js
const { sendUSDT } = require('./hotWalletService');
const { OrderRepository } = require('../db/repositories/OrderRepository');
const logger = require('../services/loggingService');

class EscrowService {
    constructor() {
        this.orderRepository = new OrderRepository();
    }

    /**
     * üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç USDT —á–µ—Ä–µ–∑ –≥–æ—Ä—è—á–∏–π –∫–æ—à–µ–ª–µ–∫
     */
    async releaseFunds(orderId) {
        try {
            const order = await this.orderRepository.findById(orderId);
            if (!order) throw new Error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            if (order.status !== 'PAID') throw new Error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω');

            logger.info(`üîÑ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${orderId}`);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ USDT —Å –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
            const transaction = await sendUSDT(order.sellerId, order.amount);
            await this.orderRepository.updateStatus(orderId, 'COMPLETED');

            logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ ${orderId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.`);
            return transaction;
        } catch (error) {
            logger.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å—Ä–µ–¥—Å—Ç–≤: ${error.message}`);
            throw error;
        }
    }
}

module.exports = new EscrowService();