const axios = require('axios');
const crypto = require('crypto');
const logger = require('../infrastructure/logger');
const redisClient = require('../infrastructure/redisClient');
const MAX_RETRIES = 3;
const RETRY_DELAY = 5000;

class WebhookService {
    /**
     * üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    async sendWebhook(url, event, payload, retries = MAX_RETRIES) {
        try {
            const signature = this.generateSignature(payload);
            for (let i = 0; i < retries; i++) {
                try {
                    await axios.post(url, payload, {
                        headers: { 'X-Signature': signature }
                    });
                    logger.info(`‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${event} ‚Üí ${url}`);
                    return;
                } catch (error) {
                    logger.warn(`üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${error.message}`);
                    if (i < retries - 1) await new Promise(res => setTimeout(res, RETRY_DELAY));
                }
            }
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ (${event}): ${error.message}`);
        }
    }

    /**
     * üìå –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞
     */
    validateWebhook(signature, payload) {
        const expectedSignature = this.generateSignature(payload);
        return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature));
    }

    /**
     * üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ HMAC
     */
    generateSignature(payload) {
        return crypto.createHmac('sha256', process.env.WEBHOOK_SECRET).update(JSON.stringify(payload)).digest('hex');
    }
}

module.exports = new WebhookService();
