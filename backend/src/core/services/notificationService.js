const { NotificationRepository } = require('../../db/repositories/NotificationRepository');
const logger = require('../../infrastructure/logger');
const metrics = require('../../infrastructure/metrics');
const telegramBot = require('../../infrastructure/telegramBot');
const WebSocketServer = require('../../infrastructure/webSocketServer');
const messageQueue = require('../../infrastructure/messageQueue');

class NotificationService {
    constructor() {
        this.notificationRepository = new NotificationRepository();
    }

    async sendNotification(userId, message) {
        try {
            logger.info(`üì¢ Sending notification to user ${userId}`);

            const notification = await this.notificationRepository.create({ userId, message });
            metrics.increment('notifications.sent');

            // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            WebSocketServer.sendToUser(userId, { type: 'notification', message });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
            await messageQueue.publish('notifications', { userId, message });

            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram
            try {
                await telegramBot.sendMessage(userId, message);
            } catch (error) {
                logger.warn(`‚ö†Ô∏è Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
            }

            return notification;
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
            throw error;
        }
    }

    async getUserNotifications(userId) {
        try {
            return await this.notificationRepository.findByUserId(userId);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${error.message}`);
            throw error;
        }
    }
}

module.exports = new NotificationService();
