const redis = require('redis');
const logger = require('./logger');

const pub = redis.createClient();
const sub = redis.createClient();

sub.on('message', async (channel, message) => {
    try {
        const data = JSON.parse(message);
        logger.info(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ ${channel}:`, data);

        switch (channel) {
            case 'transaction_confirmations':
                // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                break;
            case 'notifications':
                // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                break;
            default:
                logger.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –æ—á–µ—Ä–µ–¥–∏: ${channel}`);
        }
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);
    }
});

const publish = async (channel, message) => {
    try {
        await pub.publish(channel, JSON.stringify(message));
        logger.info(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ${channel}`);
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: ${error.message}`);
    }
};

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥–∏
sub.subscribe('transaction_confirmations');
sub.subscribe('notifications');

module.exports = { publish };
