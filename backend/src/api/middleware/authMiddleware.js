const jwt = require('jsonwebtoken');
const config = require('../../config');
const logger = require('../../infrastructure/logger');
const redisClient = require('../../infrastructure/redisClient');

const authenticate = async (req, res, next) => {
    try {
        const token = req.header('Authorization');
        if (!token) {
            return res.status(401).json({ success: false, message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
        }

        const decoded = jwt.verify(token.replace('Bearer ', ''), config.jwt_secret);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω –≤ Redis (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const isBlacklisted = await redisClient.get(`blacklist:${decoded.id}`);
        if (isBlacklisted) {
            return res.status(403).json({ success: false, message: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∏ User-Agent, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∫—Ä–∞–∂—É —Å–µ—Å—Å–∏–∏
        if (decoded.ip !== req.ip || decoded.userAgent !== req.headers['user-agent']) {
            logger.warn(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${decoded.id}, –≤–æ–∑–º–æ–∂–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞`);
            return res.status(403).json({ success: false, message: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥' });
        }

        req.user = decoded;
        next();
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
        return res.status(401).json({ success: false, message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    }
};

const authorize = (roles = []) => {
    return (req, res, next) => {
        if (!req.user || !roles.includes(req.user.role)) {
            logger.warn(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: ${req.user ? req.user.role : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`);
            return res.status(403).json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
        }
        next();
    };
};

module.exports = { authenticate, authorize };
