const redisClient = require('../../infrastructure/redisClient');
const logger = require('../../infrastructure/logger');

class SessionRepository {
  /**
   * üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ Redis —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
   */
  async createSession(userId, token, ttl = 86400) {
    const sessionKey = `session:${userId}:${token}`;
    await redisClient.set(sessionKey, JSON.stringify({ userId, token }), ttl);
    logger.info(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  /**
   * üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è
   */
  async isSessionValid(userId, token) {
    const sessionKey = `session:${userId}:${token}`;
    return !!(await redisClient.get(sessionKey));
  }

  /**
   * üìå –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (logout)
   */
  async deleteSession(userId, token) {
    const sessionKey = `session:${userId}:${token}`;
    await redisClient.del(sessionKey);
    logger.info(`üî¥ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  /**
   * üìå –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteAllSessions(userId) {
    const keys = await redisClient.keys(`session:${userId}:*`);
    for (const key of keys) {
      await redisClient.del(key);
    }
    logger.info(`üî¥ –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }
}

module.exports = new SessionRepository();
